Build a Next.js 15 app (with React 19, App Router) using TypeScript.
Integrate GitHub OAuth login with NextAuth.js (Auth.js). Require read:user scope and set up the GitHub provider with clientId and clientSecret. Include sign-in and sign-out buttons.
After login, show a form/input for a GitHub username. When submitted, fetch that user’s public repositories using the GitHub GraphQL API v4 (with the logged-in user’s token). Sort the repos by star count using orderBy: {field: STARGAZERS, direction: DESC}.
Display the repo list: each item shows Name (link to GitHub), Description, Star count, Primary language, and Last updated date. Style the list responsively (e.g. card grid or table).
Compute and display the Top Programming Languages used. Fetch each repo’s languages (via GraphQL or REST), aggregate usage, and render a pie/bar chart (using Recharts or react-chartjs-2).
Show Contributor insights: use GraphQL contributionsCollection to get total commits, PRs, issues, etc. Display these stats and optionally a small bar chart or summary cards.
Implement a “Pinned Repos” feature: allow the user to click a pin button on any repo to mark it as pinned (maximum 3–5). Store pinned repos (e.g. in a simple database or local state). In the UI, list pinned repos in a separate highlighted section.
Include a Profile section at the top: show the user’s GitHub avatar, name, bio, and follower/following counts (fetched from GraphQL).
Add a “Download PDF” or “Generate Resume” button. When clicked, render a resume-style page (with profile info and selected projects) and generate a PDF from it. Use a serverless API route with Puppeteer to convert the HTML to PDF (returning it for download).
Use Tailwind CSS v4 for styling and optional component libraries (like shadcn/ui or DaisyUI) for a polished modern look. Ensure the app is fully responsive.
Use Next.js API routes (Node.js) to handle GitHub API calls and PDF generation securely (with environment variables for API keys).
Produce all source code: Next.js pages/components, API routes, utility functions, and configuration (including next.config.js and tsconfig.json). Include comments explaining each part. The final output should be a complete, working project that meets all above requirements.